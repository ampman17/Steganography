package Cypher;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.Document;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Locale;

public class CypherEditor {
    private JFrame frame;
    private JPanel Panel;
    private JButton Start;
    private JTextField InputString;
    private JRadioButton Encrypt;
    private JRadioButton Decrypt;
    private JTextPane Output;
    private JTextField Cyphers;
    private JCheckBox AllCyphers;
    private ButtonGroup group = new ButtonGroup();

    private String string;
    private boolean encrypt = false;
    private boolean decrypt = false;
    private boolean all = false;
    private ShiftCypher shift = new ShiftCypher();
    private MultiCypher multi = new MultiCypher();

    public CypherEditor() {
        group.add(Encrypt);
        group.add(Decrypt);


        MakeGui();
        Start.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                Calculate(getData());
            }
        });
    }

    private void MakeGui() {
        frame = new JFrame("Cypher Editor by Josiah Allard");
        frame.setSize(500, 700);
        frame.setContentPane(Panel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private int[] getData() {

        //Check Input String value
        string = InputString.getText();

        //Check if Decrypt or Encrypt
        if (Encrypt.isSelected()) encrypt = true;
        else encrypt = false;
        if (Decrypt.isSelected()) decrypt = true;
        else decrypt = false;

        if (AllCyphers.isSelected()) {
            all = true;
            return null;
        } else all = false;

        //Check ShiftCypher Values
        String[] s = Cyphers.getText().split(" ");
        int[] listOfCyphers = new int[s.length];
        for (int i = 0; i < s.length; i++)
            listOfCyphers[i] = Integer.parseInt(s[i]);

        return listOfCyphers;
    }

    private void Calculate(int[] listOfCyphers) {

        //List all 26 single shift cyphers
        if (all) {

            String s;
            Output.setText("");
            Document doc = Output.getDocument();

            for (int i = 1; i <= 26; i++) {
                shift.setter(string, i);
                s = "Shift Value:" + i + "| " + shift.EncryptString() + "\n";
                try {
                    doc.insertString(doc.getLength(), s, null);
                } catch (Exception e) {
                }
            }
        }

        //There is no Encrypt/Decrypt option selected
        else if (!encrypt && !decrypt) return;

            //No cyphers to use
        else if (listOfCyphers.length <= 0) return;

            //if there is no second cypher we should use a single shift Cypher
        else if (listOfCyphers.length == 1) {
            shift.setter(string, listOfCyphers[0]);
            if (encrypt) PrintOutput(shift.EncryptString());
            else PrintOutput(shift.DecryptString());
        } else {
            multi.setter(string, listOfCyphers);
            if (encrypt) PrintOutput(multi.EncryptString());
            else PrintOutput(multi.DecryptString());
        }

    }

    private void PrintOutput(String s) {
        Output.setText(s);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Panel = new JPanel();
        Panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        Panel.setForeground(new Color(-7957061));
        Panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, Panel.getFont()), null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(250, 100), null, null, 1, false));
        InputString = new JTextField();
        InputString.setText("Please Input Your String Here");
        panel1.add(InputString, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        Encrypt = new JRadioButton();
        Encrypt.setText("Encrypt");
        panel1.add(Encrypt, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Cyphers = new JTextField();
        Cyphers.setText("Shift-Cyphers");
        panel1.add(Cyphers, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 60), null, 0, false));
        Start = new JButton();
        Start.setText("Perform Calculation");
        panel1.add(Start, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTH, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 60), null, 0, false));
        Decrypt = new JRadioButton();
        Decrypt.setText("Decrypt");
        panel1.add(Decrypt, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        AllCyphers = new JCheckBox();
        AllCyphers.setText("Include all 26 Cyphers");
        panel1.add(AllCyphers, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Output = new JTextPane();
        Output.setText("Please enter a string to convert then any number of integers seperated by spaces into the shift-cypher. For example a shift cypher of 1 will shift all values within the string by 1. A shift-cypher of 1 2 13 however will use a multi-shift cypher of [C1, C2, C13} repeating. Pleae note: \"Include all 26 Cyphers\" only works when a single cypher is entered.");
        Panel.add(Output, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 50), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        Panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(-1, 10), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Panel;
    }

}
